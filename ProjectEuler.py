'''
wtedy masz jedną pętle i jeden if, dlaczego więc zrobiłem po swojemu? z dwóch powodów:
1. mniejsze zużycie pamięci, bo nie przechowuje wyników w tablicy, a dodaje je na bieżąco
2. jak wyciągasz logikę do funkcji, to łatwiej się testuje i ewentualnie refaktoryzuje
3. print(12321321 % 10) #output: 1    so then you just: int(12321321 / 10)
'''
# https://projecteuler.net/problem=1
# If we list all the natural numbers below 10 that are multiples of 3 or 5, we get 3, 5, 6 and 9. The sum of these multiples is 23.
# Find the sum of all the multiples of 3 or 5 below 1000.
def multiples(number): 
    if number % 3 ==0 or number % 5 ==0: return True

summary = 0
for i in range(1000): #for 10 output of sum will be 23
    if multiples(i):
        summary += i 
print(summary)



# https://projecteuler.net/problem=2
#Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
#1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
#By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.
def fibonacci(maxValue):
    n1=1;n2=2;sum=n2
    while True:
        new= n1 + n2
        if new > maxValue:
            break
        if new % 2 == 0:
            sum += new
        n1=n2;n2=new
    return sum
print(fibonacci(4000000))



#https://projecteuler.net/problem=3
#The prime factors of 13195 are 5, 7, 13 and 29.
#What is the largest prime factor of the number 600851475143 ?
def maxPrimeFactors(n):
    maxPrime = -1
    while n % 2 == 0:
        maxPrime = 2
        n >>= 1     # equivalent to n /= 2
    while n % 3 == 0:
        maxPrime = 3
        n=n/3
    for i in range(5, int(n**0.5) + 1, 6):   #int(math.sqrt(n)) == int(n**0.5)  but you need 'import math' for the first
        while n % i == 0:
            maxPrime = i
            n = n / i
        while n % (i+2) == 0:
            maxPrime = i+2
            n = n / (i+2)
    if n > 4:
        maxPrime = n
    return int(maxPrime)
n = 15
print(maxPrimeFactors(n))
n = 25698751364526
print(maxPrimeFactors(n))



#https://projecteuler.net/problem=4
#A palindromic number reads the same both ways. The largest palindrome made from the product of two 2-digit numbers is 9009 = 91 × 99.
#Find the largest palindrome made from the product of two 3-digit numbers.
def highestPalindrome():
    for i in range(999,900,-1):
        for j in range(999,900,-1):
            number = j*i
            if f"{number}" == f"{number}"[::-1]:
                return number
print(highestPalindrome())



#https://projecteuler.net/problem=5
#2520 is the smallest number that can be divided by each of the numbers from 1 to 10 without any remainder.
#What is the smallest positive number that is evenly divisible by all of the numbers from 1 to 20?
def lcm(theMaxNumber): #like from 1 to 10(theMaxNumber)       #with 20 the output will be too long to display
    found = False
    i = theMaxNumber
    while found==False:
        c = 0    # c checks if the number is the one im looking for
        for x in range(1,theMaxNumber+1):
            if i%x==0:
                c = c + 1
        if c==theMaxNumber: # if c == theMaxNumber then its the number im looking for
            print(i)
            found = True
        i = i + 1
lcm(10)



#https://projecteuler.net/problem=6
#The sum of the squares of the first ten natural numbers is, $$1^2 + 2^2 + ... + 10^2 = 385$$
#The square of the sum of the first ten natural numbers is, $$(1 + 2 + ... + 10)^2 = 55^2 = 3025$$
#Hence the difference between the sum of the squares of the first ten natural numbers and the square of the sum is $3025 - 385 = 2640$.
#Find the difference between the sum of the squares of the first one hundred natural numbers and the square of the sum.
def sumSquareDifferences(number): #how many first natural numbers
    squaredEach = 0
    for i in range(number+1):
        squaredEach += i**2
    return sum(range(number+1))**2 - squaredEach
print(sumSquareDifferences(100))



#https://projecteuler.net/problem=7
#By listing the first six prime numbers: 2, 3, 5, 7, 11, and 13, we can see that the 6th prime is 13.
#What is the 10 001st prime number?
def isprime(num):
    for i in range(2,int(num**0.5)+1):
        if num%i==0:
            return False
    return True
def desiredPrimeNumber(number):
    from itertools import count
    listOfPrimes = []
    counter = 0
    for i in count(2):
        if isprime(i) == True: 
            listOfPrimes.append(i)
            counter+=1
            if counter == number:
                return listOfPrimes[-1]
print(desiredPrimeNumber(10001))



#https://projecteuler.net/problem=8
#The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
data = '''73167176531330624919225119674426574742355349194934
96983520312774506326239578318016984801869478851843
85861560789112949495459501737958331952853208805511
12540698747158523863050715693290963295227443043557
66896648950445244523161731856403098711121722383113
62229893423380308135336276614282806444486645238749
30358907296290491560440772390713810515859307960866
70172427121883998797908792274921901699720888093776
65727333001053367881220235421809751254540594752243
52584907711670556013604839586446706324415722155397
53697817977846174064955149290862569321978468622482
83972241375657056057490261407972968652414535100474
82166370484403199890008895243450658541227588666881
16427171479924442928230863465674813919123162824586
17866458359124566529476545682848912883142607690042
24219022671055626321111109370544217506941658960408
07198403850962455444362981230987879927244284909188
84580156166097919133875499200524063689912560717606
05886116467109405077541002256983155200055935729725
71636269561882670428252483600823257530420752963450'''.replace("\n","")
#Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?
def adjacentNumbers(adj):
    maxProduct = 0
    maxSet = 0
    startFrom = 0
    while startFrom < len(data)-adj:
        adjSet = data[startFrom:startFrom+adj]
        if "0" in adjSet:
            startFrom+= 1
        else:
            product = 1
            for i in adjSet: 
                product *= int(i)
            if maxProduct < product:
                maxProduct = product
                product = 1
                if maxSet != adjSet:
                    maxSet = adjSet
            startFrom+= 1
    return maxSet
print(adjacentNumbers(13))



#https://projecteuler.net/problem=9
#A Pythagorean triplet is a set of three natural numbers, a < b < c, for which,
#a2 + b2 = c2
#For example, 3^2 + 4^2 = 5^2      9 + 16 = 25
#There exists exactly one Pythagorean triplet for which a + b + c = 1000.
#Find the product abc.
for b in range(1, 500):
    if 1000*(500-b) % (1000-b) == 0:
        print(b)
'''
it gives 200 and 375 as a result for b, so a is one of it too
and you get c by from 1000 substracting 200+375
'''
#for a in range(1000):          #good resolution too
#    for b in range(1000):
#        c = 1000 - a - b
#        if a*a + b*b == c*c:
#            print(a, b, c)



#https://projecteuler.net/problem=10
#The sum of the primes below 10 is 2 + 3 + 5 + 7 = 17.
#Find the sum of all the primes below two million.
def isprime(num):
    for i in range(2,int(num**0.5)+1):
        if num%i==0:
            return False
    return True
def sumOfPrimesBelowThreshold(threshold):
    allPrimesBelowThreshold = []
    for i in range(2,threshold):
        if isprime(i):
            allPrimesBelowThreshold.append(i)
    return sum(allPrimesBelowThreshold)
print(sumOfPrimesBelowThreshold(10))



#https://projecteuler.net/problem=11
#In the 20×20 grid below, four numbers along a diagonal line have been marked in red.
data = '''
08 02 22 97 38 15 00 40 00 75 04 05 07 78 52 12 50 77 91 08
49 49 99 40 17 81 18 57 60 87 17 40 98 43 69 48 04 56 62 00
81 49 31 73 55 79 14 29 93 71 40 67 53 88 30 03 49 13 36 65
52 70 95 23 04 60 11 42 69 24 68 56 01 32 56 71 37 02 36 91
22 31 16 71 51 67 63 89 41 92 36 54 22 40 40 28 66 33 13 80
24 47 32 60 99 03 45 02 44 75 33 53 78 36 84 20 35 17 12 50
32 98 81 28 64 23 67 10 26 38 40 67 59 54 70 66 18 38 64 70
67 26 20 68 02 62 12 20 95 63 94 39 63 08 40 91 66 49 94 21
24 55 58 05 66 73 99 26 97 17 78 78 96 83 14 88 34 89 63 72
21 36 23 09 75 00 76 44 20 45 35 14 00 61 33 97 34 31 33 95
78 17 53 28 22 75 31 67 15 94 03 80 04 62 16 14 09 53 56 92
16 39 05 42 96 35 31 47 55 58 88 24 00 17 54 24 36 29 85 57
86 56 00 48 35 71 89 07 05 44 44 37 44 60 21 58 51 54 17 58
19 80 81 68 05 94 47 69 28 73 92 13 86 52 17 77 04 89 55 40
04 52 08 83 97 35 99 16 07 97 57 32 16 26 26 79 33 27 98 66
88 36 68 87 57 62 20 72 03 46 33 67 46 55 12 32 63 93 53 69
04 42 16 73 38 25 39 11 24 94 72 18 08 46 29 32 40 62 76 36
20 69 36 41 72 30 23 88 34 62 99 69 82 67 59 85 74 04 36 16
20 73 35 29 78 31 90 01 74 31 49 71 48 86 81 16 23 57 05 54
01 70 54 71 83 51 54 69 16 92 33 48 61 43 52 01 89 19 67 48
'''
#The product of these numbers is 26 × 63 × 78 × 14 = 1788696.
#What is the greatest product of four adjacent numbers in the same direction (up, down, left, right, or diagonally) in the 20×20 grid?
numberData = (data.split())
#Get product of four adjacent numbers in left to right direction
def leftToRight(list, diff):
    first = 0
    last = len(list) - diff
    product = []

    for x in range(first, last):
        multi = int(list[x]) * int(list[x + 1]) * int(list[x + 2]) * int(list[x + 3])
        product.append(multi)
    return product
#Get product of four adjacent numbers in top to bottom direction
def topToDown(list, diff):
    first = 0
    last = len(list) - (diff * 20)
    product = []

    for x in range(first, last):
        multi = int(list[x]) * int(list[x + 20]) * int(list[x + 40]) * int(list[x + 60])
        product.append(multi)
    return product
#Get product of four adjacent numbers in left Diagonal to right Diagonal direction
def rightDiagonal(list, diff):
    first = 0
    last = len(list) - (diff * 20)
    product = []

    for x in range(first, last):
        if x % 20 < 17:
            # print((list[x]), int(list[x + 21]), int(list[x + 42]), int(list[x + 63]))
            multi = int(list[x]) * int(list[x + 21]) * int(list[x + 42]) * int(list[x + 63])
            product.append(multi)
    return product
#Get product of four adjacent numbers in right Diagonal to left Diagonal direction
def leftDiagonal(list, diff):
    first = 0
    last = len(list) - (diff * 20)
    product = []

    for x in range(first, last):
        if x % 20 > 2:
            # print((list[x]), int(list[x + 19]), int(list[x + 38]), int(list[x + 57]))
            multi = int(list[x]) * int(list[x + 19]) * int(list[x + 38]) * int(list[x + 57])
            product.append(multi)
    return product
#Get greatest product
new_list = leftToRight(numberData, 3) + topToDown(numberData, 3) + rightDiagonal(numberData, 3) + leftDiagonal(numberData, 3)
sort = list(reversed(sorted(new_list)))
highest = sort[0]
print(highest)

skroconaWersjaPierwszego = '''
def greatestProductOfGrids(fData):
    #jakoś niechce działać bez try i except przy skroceniu
    product = []
    for x in range(0, len(fData)-3):
        #Get product of four adjacent numbers in left to right direction
        leftToRightProduct = int(fData[x]) * int(fData[x + 1]) * int(fData[x + 2]) * int(fData[x + 3])
        product.append(leftToRightProduct)

    for x in range(0, len(data)-3*20):
        #Get product of four adjacent numbers in top to bottom direction
        try:
            topToDownProduct = int(fData[x]) * int(fData[x + 20]) * int(fData[x + 40]) * int(fData[x + 60])
            product.append(topToDownProduct)
        except IndexError:
            pass

        #Get product of four adjacent numbers in left Diagonal to right Diagonal direction
        if x % 20 < 17:
            try:
                rightDiagonalProduct = int(fData[x]) * int(fData[x + 21]) * int(fData[x + 42]) * int(fData[x + 63])
                product.append(rightDiagonalProduct)
            except:
                pass
        #Get product of four adjacent numbers in right Diagonal to left Diagonal direction
        if x % 20 > 2:
            try:
                leftDiagonalProduct = int(fData[x]) * int(fData[x + 19]) * int(fData[x + 38]) * int(fData[x + 57])
                product.append(leftDiagonalProduct)
            except:
                pass
    return sorted(product)[-1]
print(greatestProductOfGrids(numberData))'''
drugaWersjaRozwiązania ='''
import numpy as np
ss = np.array([[int(x) for x in data.split()][i:i+20] for i in range(0,400,20)]).reshape(20, 20)
#process 4 elements to right, down, left-down-diagonal, right-down-diagonal
#check right: row: 1 thru 20 (index 0:19); columns: 1 thru 16 (index 0:15)
mr = max(np.prod(ss[i,j:j+4]) for i in range(20) for j in range(16))
#check down: row: 1 thru 16 (index 0:15); columns: 1 thru 20 (index 0:19)
mc = max(np.prod(ss[i:i+4,j]) for i in range(16) for j in range(20))
#check right-down-diagonal: row: 1 thru 16 (index 0:15); columns: 1 thru 16 (index 0:15). row,col increments by 1 to go right-down-diagonal 
mx = max(np.prod([ss[i+k,j+k] for k in range(4)]) for i in range(16) for j in range(16))
#check left-down-diagonal: row: 1 thru 20 (index 0:19); columns: 4 thru 20 (index 3:19). row increments by 1 and col decrements by 1 to go right-down-diagonal
my = max(np.prod([ss[i+k,j-k] for k in range(4)]) for i in range(16) for j in range(3,20))
ans = max([mr,mc,mx,my])
print (ans)
'''



#https://projecteuler.net/problem=12
#The sequence of triangle numbers is generated by adding the natural numbers. So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
#1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
#Let us list the factors of the first seven triangle numbers:
#     1: 1
#     3: 1,3
#     6: 1,2,3,6
#    10: 1,2,5,10
#    15: 1,3,5,15
#    21: 1,3,7,21
#    28: 1,2,4,7,14,28
#We can see that 28 is the first triangle number to have over five divisors.
#What is the value of the first triangle number to have over five hundred divisors?
def firstTriangularNumberToHaveOverGivenDivisors(amountOfDivisors):
    #loop for making triangular numbers
    from itertools import count
    tn=0
    divisors=[]
    for i in count(1):
        tn+=i
        for j in range(1,int((tn**0.5)+1)):
            if (tn/int(j))%1 == 0:
                divisors.append(j)
                divisors.append(int(tn/j))
        if len(divisors) > amountOfDivisors:
            return tn
        else:
            divisors.clear()
print(firstTriangularNumberToHaveOverGivenDivisors(500))



#https://projecteuler.net/problem=13
#Work out the first ten digits of the sum of the following one-hundred 50-digit numbers.
def xDigitSumOfLargeNumbers(digitInSum):
    import requests
    from bs4 import BeautifulSoup
    import re
    res= requests.get('https://projecteuler.net/minimal=13')
    soup= BeautifulSoup(res.text, 'html.parser')

    #to get rid of all the tags
    soup.p.decompose()
    soup.div.unwrap()
    for e in soup.findAll('br'):
        e.extract()
    
    #to work on single 50-digit numbers
    summary = 0
    for value in soup:
        number= re.sub('\n', '', value)
        try:
            summary += int(number)
        except ValueError:
            continue
        print(summary)
    return str(summary)[0:digitInSum]
print(xDigitSumOfLargeNumbers(10))



#https://projecteuler.net/problem=14
#The following iterative sequence is defined for the set of positive integers:
#n → n/2 (n is even)
#n → 3n + 1 (n is odd)
#Using the rule above and starting with 13, we generate the following sequence:
#13 → 40 → 20 → 10 → 5 → 16 → 8 → 4 → 2 → 1
#It can be seen that this sequence (starting at 13 and finishing at 1) contains 10 terms. Although it has not been proved yet (Collatz Problem), it is thought that all starting numbers finish at 1.
#Which starting number, under one million, produces the longest chain?
#note: Once the chain starts the terms are allowed to go above one million.
def longestCollatzSequence(rangeOfScope):
    length = 0
    for x in range(1, rangeOfScope+1):
        tmpLength = 1
        while x != 1:
            if x % 2 == 0: x/=2
            elif x % 2 == 1: (x:=x*3+1)
            tmpLength += 1
        if length < tmpLength: length = tmpLength
    return length
print(longestCollatzSequence(999999))



#https://projecteuler.net/problem=15
#Starting in the top left corner of a 2×2 grid, and only being able to move to the right and down, there are exactly 6 routes to the bottom right corner.
#How many such routes are there through a 20×20 grid?
def latticePathsOfSquaredGrids(gridLength):
    setElements = gridLength*2
    n = 1
    k = 1
    for i in range(gridLength,0,-1):
        k*=i
    for j in range(setElements,0,-1):
        n*=j
    #template: n!/(k!*(n-k)!)
    return int(n/(k*k))
print(latticePathsOfSquaredGrids(20))



#https://projecteuler.net/problem=16
#2^15 = 32768 and the sum of its digits is 3 + 2 + 7 + 6 + 8 = 26.
#What is the sum of the digits of the number 2^1000?
def sumOfDigitsOfPoweredNumber(numberToPower, powerForNumber):
    #because shorthand syntax is comprehension of iterables (list,dict,set,...) on its own 
    return sum(int(digits) for digits in str((numberToPower**powerForNumber)))
print(sumOfDigitsOfPoweredNumber(2,1000))



#https://projecteuler.net/problem=17
#If the numbers 1 to 5 are written out in words: one, two, three, four, five, then there are 3 + 3 + 5 + 4 + 4 = 19 letters used in total.
#If all the numbers from 1 to 1000 (one thousand) inclusive were written out in words, how many letters would be used?
#note: Do not count spaces or hyphens. For example, 342 (three hundred and forty-two) contains 23 letters and 115 (one hundred and fifteen) contains 20 letters. The use of "and" when writing out numbers is in compliance with British usage.
def numbersToWords(number):
    '''
    Positive natural numbers up to (Quintilliard - 1) == (10^33 - 1) 
    '''
    #strings at index 0 and 1, are to make array indexing simple - not used
    #so we will not see "zero zero zero three four two" for 342
    if number == 0: return 'zero'
    ones=['','one','two','three','four','five','six','seven','eight','nine','ten','eleven','twelve','thirteen','fourteen','fifteen','sixteen','seventeen','eighteen','nineteen']
    tens=['','','twenty ','thirty ','forty ','fifty ','sixty ','seventy ','eighty ','ninety ']

    def helpingFunction(number,addition):
        nString=''
        if number>19:
            #example for 21:  str(21//10=2  +  21%10=1)=twentyone 
            nString+= tens[number//10] + ones[number % 10]
        else:
            nString+= ones[number]
        #checks if number is not 0
        if (number):
            nString+=addition
        return nString

    cout=''
    if len(str(number)) >= 11:
        cout+=helpingFunction(((number//10**31)%10),' hundred ')
        if ((number//10**31)%10) > 0 and ((number//10**30)%100) == 0 and ((number//10**30)%10) == 0: cout+='quintillion '
        cout+=helpingFunction(((number//10**30)%100),' quintillion ')
        cout+=helpingFunction(((number//10**28)%10),' hundred ')
        if ((number//10**28)%10) > 0 and ((number//10**27)%100) == 0 and ((number//10**27)%10) == 0: cout+='quadrilliard '
        cout+=helpingFunction(((number//10**27)%100),' quadrilliard ')
        cout+=helpingFunction(((number//10**26)%10),' hundred ')
        if ((number//10**26)%10) > 0 and ((number//10**24)%100) == 0 and ((number//10**24)%10) == 0: cout+='quadrillion '
        cout+=helpingFunction(((number//10**24)%100),' quadrillion ')
        cout+=helpingFunction(((number//10**23)%10),' hundred ')
        if ((number//10**23)%10) > 0 and ((number//10**21)%100) == 0 and ((number//10**21)%10) == 0: cout+='triliard '
        cout+=helpingFunction(((number//10**21)%100),' triliard ')
        cout+=helpingFunction(((number//10**20)%10),' hundred ')
        if ((number//10**20)%10) > 0 and ((number//10**18)%100) == 0 and ((number//10**18)%10) == 0: cout+='trilion '
        cout+=helpingFunction(((number//10**18)%100),' trilion ')
        cout+=helpingFunction(((number//10**17)%10),' hundred ')
        if ((number//10**17)%10) > 0 and ((number//10**15)%100) == 0 and ((number//10**15)%10) == 0: cout+='biliard '
        cout+=helpingFunction(((number//10**15)%100),' biliard ')
        cout+=helpingFunction(((number//10**14)%10),' hundred ')
        if ((number//10**14)%10) > 0 and ((number//10**12)%100) == 0 and ((number//10**12)%10) == 0: cout+='bilion '
        cout+=helpingFunction(((number//10**12)%100),' bilion ')
        cout+=helpingFunction(((number//10**11)%10),' hundred ')
        if ((number//10**11)%10) > 0 and ((number//10**9)%100) == 0 and ((number//10**9)%10) == 0: cout+='miliard '
    cout+=helpingFunction(((number//10**9)%100),' miliard ')
    cout+=helpingFunction(((number//10**8)%10),' hundred ')
    if ((number//10**8)%10) > 0 and ((number//10**6)%100) == 0 and ((number//10**6)%10) == 0: cout+='milion '
    cout+=helpingFunction(((number//10**6)%100),' milion ')
    cout+=helpingFunction(((number//10**5)%10),' hundred ')
    if ((number//10**5)%10) > 0 and ((number//10**3)%100) == 0 and ((number//10**3)%10) == 0: cout+='thousand '
    cout+=helpingFunction(((number//10**3)%100),' thousand ')
    cout+=helpingFunction(((number//10**2)%10)," hundred ")

    if number > 100 and number % 100:
        cout+='and '
    cout+=helpingFunction((number%100),'')
    return cout
def amountOfLettersOfRangeOfNumbersAfterConversionToWords(fromWhere,toWhere):
    placeholder=''
    for i in range(fromWhere,toWhere+1): placeholder+=numbersToWords(i).strip()
    return len(placeholder)
print(amountOfLettersOfRangeOfNumbersAfterConversionToWords(1,1000))



#https://projecteuler.net/problem=18
# By starting at the top of the triangle below and moving to adjacent numbers on the row below, the maximum total from top to bottom is 23.
#    3
#   7 4
#  2 4 6
# 8 5 9 3
# That is, 3 + 7 + 4 + 9 = 23.
# Find the maximum total from top to bottom of the triangle below:
#                75
#               95 64
#             17 47 82
#            18 35 87 10
#           20 04 82 47 65
#          19 01 23 75 03 34
#         88 02 77 73 07 63 67
#        99 65 04 28 06 16 70 92
#       41 41 26 56 83 40 80 70 33
#      41 48 72 33 47 32 37 16 94 29
#     53 71 44 65 25 43 91 52 97 51 14
#    70 11 33 28 77 73 17 78 39 68 17 57
#   91 71 52 38 17 14 91 43 58 50 27 29 48
#  63 66 04 68 89 53 67 30 73 16 69 87 40 31
# 04 62 98 27 23 09 70 98 73 93 38 53 60 04 23
# note: As there are only 16384 routes, it is possible to solve this problem by trying every route. However, Problem 67, is the same challenge with a triangle containing one-hundred rows; it cannot be solved by brute force, and requires a clever method! ;o)
try:
    with open('triangleDataFile.txt') as data:
        numberIndex=0
        previousNumber=data.readline().rstrip().split()
        summary=int(previousNumber[0])
        for line in data:
            numberSet=line.rstrip().split()
            if numberIndex > 0:
                previousNumber=max(numberSet[numberIndex-1],numberSet[numberIndex],numberSet[numberIndex+1])
                if numberSet[numberIndex-1] == previousNumber: numberIndex-=1
                elif numberSet[numberIndex+1] == previousNumber: numberIndex+=1
            elif numberIndex == 0:
                previousNumber=max(numberSet[numberIndex],numberSet[numberIndex+1])
                if numberSet[numberIndex+1] == previousNumber: numberIndex+=1
            summary+=int(previousNumber)
        print(summary)
except FileNotFoundError:
    print('File Not Found.')



#https://projecteuler.net/problem=19
# You are given the following information, but you may prefer to do some research for yourself.
#     1 Jan 1900 was a Monday.
#     Thirty days has September,
#     April, June and November.
#     All the rest have thirty-one,
#     Saving February alone,
#     Which has twenty-eight, rain or shine.
#     And on leap years, twenty-nine.
#     A leap year occurs on any year evenly divisible by 4, but not on a century unless it is divisible by 400.
#How many Sundays fell on the first of the month during the twentieth century (1 Jan 1901 to 31 Dec 2000)?
def countingSundays():
    '''copied and only little formatted'''
    from datetime import date
    from collections import Counter
    counter = Counter()
    for year in range(1901, 2001):
        for month in range(1, 13):
            day = date(year, month, 1)
            counter[day.weekday()] += 1
    print(counter[6])
countingSundays()
#version 2
def CoutingDaysFromGivenTimeToGivenTime(YearStart,YearEnd):
    '''copied and only little formatted'''
    import time
    from math import floor
    def day_of_week(year, month, day):
        """
        Gaussian algorithm to determine day of week
        """
        d= day  #day from 1 to 31
        m= (month-3)%12+1   #shifted month (March = 1, February = 12)
        if m>10: Y= year-1  #Y=year-1 for January or February
        else: Y = year  #Y=year for other months
        y = Y%100   #last two digits of Y
        c = (Y-(Y%100))/100 #first two digits of Y
        w = (d+floor(2.6*m-0.2)+y+floor(y/4)+floor(c/4)-2*c)%7  #w=day of the week (sunday=0,saturday=6)
        return int(w)
    def months_start_range(day,year_start,year_end):
        """
        Compute the number of months starting on a given day of the week in a century
        """
        total = 0
        for year in range(year_start, year_end + 1):
            for month in range(1,13):
                if day_of_week(year, month, 1) == day: total += 1
        return total
    start = time.time()
    total = months_start_range(0,YearStart,YearEnd)
    elapsed = time.time() - start
    print("{} found in {} seconds".format(total,elapsed))
CoutingDaysFromGivenTimeToGivenTime(1000,2000)



#https://projecteuler.net/problem=20
#n! means n × (n − 1) × ... × 3 × 2 × 1
#For example, 10! = 10 × 9 × ... × 3 × 2 × 1 = 3628800,
#and the sum of the digits in the number 10! is 3 + 6 + 2 + 8 + 8 + 0 + 0 = 27.
#Find the sum of the digits in the number 100!
def sumOfDigitsOfFactoring(number):
    n = 1
    for partOfFactor in range(number,0,-1): n*=partOfFactor
    return sum(int(digits) for digits in str(n))
print(sumOfDigitsOfFactoring(10))



#https://projecteuler.net/problem=21
# Let d(n) be defined as the sum of proper divisors of n (numbers less than n which divide evenly into n).
# If d(a) = b and d(b) = a, where a ≠ b, then a and b are an amicable pair and each of a and b are called amicable numbers.
# For example, the proper divisors of 220 are 1, 2, 4, 5, 10, 11, 20, 22, 44, 55 and 110; therefore d(220) = 284. The proper divisors of 284 are 1, 2, 4, 71 and 142; so d(284) = 220.
# Evaluate the sum of all the amicable numbers under 10000.
def amicableSumBelowNumber(num):
    '''copied'''
    divisor_sum = [0] * num
    for i in range(1, len(divisor_sum)):
        for j in range(i * 2, len(divisor_sum), i):
            #by example:
            #divisor_sum[220] will have value 284
            #and divisor_sum[284] will have value 220
            divisor_sum[j] += i	
	# Find all amicable pairs 
    result=0
    for i in range(1, len(divisor_sum)):
        j = divisor_sum[i]  #example: j = 284 for divisor_sum[220]
        if j != i and j < len(divisor_sum) and divisor_sum[j] == i:
            #checks if, example: divisor_sum[284] == 220
            result += i
    return str(result)
print(amicableSumBelowNumber(500))



#https://projecteuler.net/problem=22
# Using names.txt (right click and 'Save Link/Target As...'), a 46K text file containing over five-thousand first names, begin by sorting it into alphabetical order. Then working out the alphabetical value for each name, multiply this value by its alphabetical position in the list to obtain a name score.
# For example, when the list is sorted into alphabetical order, COLIN, which is worth 3 + 15 + 12 + 9 + 14 = 53, is the 938th name in the list. So, COLIN would obtain a score of 938 × 53 = 49714.
# What is the total of all the name scores in the file?
def nameScores():    
    from string import ascii_uppercase
    def score(word):
        '''example:  COLIN ==> 3 + 15 + 12 + 9 + 14 = 53'''
        return sum(ascii_uppercase.index(character) + 1 for character in word.strip('"'))
    #the file with names is to be downloaded from the site
    with open('names.txt') as f:
        names = f.read().split(',')
        names.sort()
        #name position in file * score from function
        print(sum(position*score(nameScore) for position, nameScore in enumerate(names, 1)))
nameScores()
#info below - copied
#splitted = open('names.txt').read().replace('","',',').replace('"','').split(',')
#description: open the file, then read it, after that remove double qoutes by repalce them with none and at the end split the whole string by comma (,) good luck



#https://projecteuler.net/problem=23
# A perfect number is a number for which the sum of its proper divisors is exactly equal to the number. For example, the sum of the proper divisors of 28 would be 1 + 2 + 4 + 7 + 14 = 28, which means that 28 is a perfect number.
# A number n is called deficient if the sum of its proper divisors is less than n and it is called abundant if this sum exceeds n.
# As 12 is the smallest abundant number, 1 + 2 + 3 + 4 + 6 = 16, the smallest number that can be written as the sum of two abundant numbers is 24. By mathematical analysis, it can be shown that all integers greater than 28123 can be written as the sum of two abundant numbers. However, this upper limit cannot be reduced any further by analysis even though it is known that the greatest number that cannot be expressed as the sum of two abundant numbers is less than this limit.
# Find the sum of all the positive integers which cannot be written as the sum of two abundant numbers.
def intsNotMadeFromAbundants():
    from itertools import compress

    abundants = []
    for i in range(12,28123):
        factor = 0
        for j in range(2,int((i)**0.5)+1):
            if i%j == 0:
                factor+= j + i//j
                if j == (i**0.5):
                    factor -= j
        if factor>i:
            abundants.append(i)
    num_list = [True]*28123
    k = 0
    for i in abundants:
        for j in abundants[k:]:
            if(i+j>28123): break
            num_list[i+j-1] = False
        k+=1
    return sum(compress(range(1,28124),num_list))
print(intsNotMadeFromAbundants())

def SECONDintsNotMadeFromAbundants():
    '''copied and formated'''
    import math
    import numpy as np
    def getDivisors(num):
        if num==1: return 1
        n = math.ceil(num**0.5)
        total = 1
        divisor = 2
        while (divisor < n):
            if (num%divisor == 0): total += divisor + num//divisor
            divisor+=1
        if n**2==num: total+=n
        return total
    def isAbundant(num):
        if (getDivisors(num) > num): return True
        else: return False
    abundentNums=[x for x in range (0,28124) if isAbundant(x)]
    del abundentNums[0]
    A = np.array(abundentNums)
    B = np.linspace(1,28123,28123)
    C = np.unique(np.add.outer(A, A)[(np.add.outer(A, A) < 28124)])
    ans = int(np.sum(B) - np.sum(C))



#https://projecteuler.net/problem=24
# A permutation is an ordered arrangement of objects. For example, 3124 is one possible permutation of the digits 1, 2, 3 and 4. If all of the permutations are listed numerically or alphabetically, we call it lexicographic order. The lexicographic permutations of 0, 1 and 2 are:
# 012   021   102   120   201   210
# What is the millionth lexicographic permutation of the digits 0, 1, 2, 3, 4, 5, 6, 7, 8 and 9?
def firstCode(chosenIndex,*numbersORchars):
    '''First code that works too, but with bigger numbers does way more calculations'''
    from itertools import permutations
    return int(''.join(str(list(permutations(numbersORchars))[chosenIndex]).replace(', ','').replace(')','').replace('(','')))

def secondCode(chosenIndex,*numbersORchars):
    '''
    Index = from 0 to (chosen number - 1);
    Insert as many digits/chars as you want;
    RETURNS: string in order to work with 0 as first character;
    '''
    from itertools import product
    factoring = 1
    for x in range(1,len(numbersORchars)+1): factoring*=x

    if chosenIndex > factoring-1: 
        raise IndexError('The maximal index for provided combination of characters is: {}.'.format(factoring-1)+' And a minimal index is: 0.')
    
    searchedFirstCharORDigit = chosenIndex//int(factoring/len(numbersORchars))
    minimalIndex = (int(factoring/len(numbersORchars)))*searchedFirstCharORDigit
    pool = list(numbersORchars[0:searchedFirstCharORDigit])+list(numbersORchars[searchedFirstCharORDigit+1:len(numbersORchars)])
    n = len(pool)

    def generator(pool,n):
        for indices in product(range(n),repeat=n):
            if len(set(indices)) == n:
                yield list(pool[i] for i in indices)

    return str(searchedFirstCharORDigit)+str(list(generator(pool,n))[chosenIndex-minimalIndex]).replace('[','').replace(']','').replace(', ','')
    # Searched information:
    # 'I timed all the methods in the current answers along with one extra.'
    # With an input string of abc&def#ghi and replacing & -> \& and # -> \#, 
    # the fastest way was to chain together the replacements like this: 
    # text.replace('&', '\&').replace('#', '\#').

def lexicographicPermutationsOf(chosenIndex,*numbersORchars):
    '''NOT DONE - FOR WHATEVER REASON FACTORIAL DOES NOT WORK'''
    #If you have 9 objects, you can have 9! = 3,628,800 permutations. 
    # So with the 10 digits, 0 through 9, the first 362,880 permutations will be 0#########, 
    # the next 362,880 permutations will be 1#########, and you’ll reach the millionth permutation 274,240 permutations 
    # in to the 2#########’s. So, 1 digit down, 9 to go.
    def factor(ofWhat):
        factoring = 1
        for x in range(1,ofWhat+1): factoring*=x
        return factoring

    if chosenIndex > factor(len(numbersORchars)): 
        raise IndexError('The maximal index for provided combination of characters is: {}.'.format(factor(len(numbersORchars)))+' Whereas a minimal index is: 0.')
    
    thePermutation = ''
    for i in range(1,len(numbersORchars)+1):
        theNumber = chosenIndex//int(factor(len(numbersORchars)-i))
        thePermutation += str(numbersORchars[int(theNumber)])
        chosenIndex = chosenIndex - (int(factor(len(numbersORchars)-i)))*theNumber
    return thePermutation
    #2783915604
print(lexicographicPermutationsOf(1000000,0,1,2,3,4,5,6,7,8,9))




# https://projecteuler.net/problem=26
# A unit fraction contains 1 in the numerator. The decimal representation of the unit fractions with denominators 2 to 10 are given:
#     1/2	= 	0.5
#     1/3	= 	0.(3)
#     1/4	= 	0.25
#     1/5	= 	0.2
#     1/6	= 	0.1(6)
#     1/7	= 	0.(142857)
#     1/8	= 	0.125
#     1/9	= 	0.(1)
#     1/10	= 	0.1 
# Where 0.1(6) means 0.166666..., and has a 1-digit recurring cycle. It can be seen that 1/7 has a 6-digit recurring cycle.
# Find the value of d < 1000 for which 1/d contains the longest recurring cycle in its decimal fraction part.
def recurringCycleOfFraction(rangeFra):
    '''
    no idea if this is ended
    '''
    num,longest = 1,1
    for i in range(3,rangeFra,2):
        if i%5!=0:
            p = 1
            while (10 ** p) % i != 1:
                p += 1
                if p > longest:
                    num, longest = i, p
    print(num)
recurringCycleOfFraction(2333)